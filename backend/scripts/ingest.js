// this script is intended to ingest the database with all the data in the dataset folder
require('dotenv').config()
const mysql = require('mysql2')
const xlsx = require('xlsx')
const path = require('path')
const fs = require('fs');
/*
  data layout - categories of entries: first Izvajalec, then Dejavnost, Zdravnik and finally Zaposlitev_zdravnika
  GIN_ZO - gynecologist
  SA_ZO - primary care/family doctor
  ZOB_ZO - dentist
  data structure:
    - Izvajalec: sifra_iz, naziv_iz, enota, ulica, kraj -> B, C, A, D, E
    - Dejavnost: sifra_de, naziv_de -> H, I
    - Zdravnik: sifra_zd, ime, sifra_de, sifra_iz -> F, G, H, B
    - Zaposlitev_zdravnika: id_zapos, sifra_zd, datum, obseg, kolicnik, sprejem -> _, F, _, K, L, J
        -- (first _ is generated by the DB, second _ is parsed from the file date)
*/

// function that takes a filename and does
function ingestFile(filePath) {

  file = path.basename(filePath, path.extname(filePath));

  // prepare the query strings and arrays of rows
  var queryIzvajalec = `INSERT IGNORE INTO Izvajalec VALUES ?`;
  var queryDejavnost = `INSERT IGNORE INTO Dejavnost VALUES ?`;
  var queryZdravnik = `INSERT IGNORE INTO Zdravnik VALUES ?`;
  var queryZaposlitevZdravnika = `INSERT IGNORE INTO Zaposlitev_zdravnika VALUES ?`;
  var valuesIzvajalec = [];
  var valuesDejavnost = [];
  var valuesZdravnik = [];
  var valuesZaposlitevZdravnika = [];

  // access the sheet
  const workbook = xlsx.readFile(filePath);
  const sheetName = workbook.SheetNames[0];
  const sheet = workbook.Sheets[sheetName];

  // extract the rows
  const rows = xlsx.utils.sheet_to_json(sheet, {
  header: 1,
  defval: "",   // fill missing cells with ""
  blankrows: false
}).slice(10);

  // iterate through them
  for (let row of rows) {
    //console.log(row.slice(0, 12));
    if (row.slice(0, 12).some(v => v === "" || v == null)) continue; // data integrity (A-L columns contain the data)
    valuesIzvajalec.push([parseInt(row[1]), row[2], row[0], row[3], row[4]]);
    valuesDejavnost.push([parseInt(row[7]), row[8]]);
    valuesZdravnik.push([parseInt(row[5]), row[6], parseInt(row[7]), parseInt(row[1])]);
    if (row[9] == "DA") var bool = true; else var bool = false; // bool parsing
    // date parsing
    var datePart = file.split("ZO_").pop();  
    var [dd, mm, yyyy] = datePart.split("_");  
    var sqlDate = `${yyyy}-${mm}-${dd}`;

    valuesZaposlitevZdravnika.push([null, parseInt(row[5]), sqlDate, parseFloat(row[10]), parseFloat(row[11]), bool]);
    
  }
  // the queries - the reason for chaining is async
  conn.query(queryIzvajalec, [valuesIzvajalec], (err) => {
    if (err) return console.error('Izvajalec insert of ', file, ' failed:', err);
    conn.query(queryDejavnost, [valuesDejavnost], (err) => {
      if (err) return console.error('Dejavnost insert failed:', err);
      conn.query(queryZdravnik, [valuesZdravnik], (err) => {
        if (err) return console.error('Zdravnik insert failed:', err);
        conn.query(queryZaposlitevZdravnika, [valuesZaposlitevZdravnika], (err) => {
          if (err) return console.error('Zaposlitev_zdravnika insert failed:', err);
          console.log('All inserts done successfully');
        });
      });
    });
  });
}


const conn = mysql.createConnection({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASS,
  database: process.env.DB_DATABASE,
});

conn.connect((err) => {
  if (err) {
    console.error('Connection error:', err);
    return;
  }
  console.log('Connected to MySQL database');

  const rootPath = path.join(__dirname, 'data');
  const stack = [rootPath];

  while (stack.length > 0) {
    const currentPath = stack.pop();
    const entries = fs.readdirSync(currentPath, { withFileTypes: true });

    for (const entry of entries) {
      const fullPath = path.join(currentPath, entry.name);
      if (entry.isDirectory()) {
        stack.push(fullPath);
      } else if (entry.isFile()) {
        if (/^(GIN_ZO|ZOB_ZO|SA_ZO)/.test(entry.name)) {
          ingestFile(fullPath);
          console.log("done with ", fullPath);
        }
      }
    }
  }
});


